<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{aeb0ffbd-bfce-412b-af43-72f522b12325}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	//Communicator
fbCommunicator: AppCommunicator();

	// trigger command execution for Postman-Echo samples
		bGet10sek, bGet24h,bGetSMHI	: BOOL;

	fbHttpClientEonMaetare			: FB_IotHttpClient :=(sHostName:='connectix_smartmeter.local',   // 192.168.68.61
								  	bKeepAlive:=TRUE, tConnectionTimeout:=T#20S);
									
	fbHttpClientHuset			: FB_IotHttpClient :=(sHostName:='192.168.68.200', //Husets El - Shelly
								  	bKeepAlive:=TRUE, tConnectionTimeout:=T#10S);
		
	fbHttpClientElpriset			: FB_IotHttpClient :=(sHostName:='elprisetjustnu.se',
									  	bKeepAlive:=TRUE, tConnectionTimeout:=T#4S);
									
	fbHttpClientSMHI			: FB_IotHttpClient :=(sHostName:='opendata-download-metfcst.smhi.se',
								  	bKeepAlive:=FALSE, tConnectionTimeout:=T#10S);

	fbHttpGetEonMaetare			: FB_HTTP_Get_SmartMeter;
	fbHttpGetHuset				: FB_HTTP_Get_Huset;
	fbHttpGetElpriset			: FB_HTTP_Get_Elpris;
	fbHttpGetSMHI				: FB_HTTP_Get_SMHI;
	



	samladataIntervall: TON;
		
	
	trigger: BOOL;
	loggadata: BOOL;
	raeknartid: TIME;

	nisse: UINT;
	klar: BOOL;
	funkar: BOOL;
	upptagen: BOOL;
	
			systemtid: DT;
	fbGetsytstemtime: GETSYSTEMTIME;
	filetime: T_FILETIME;

	// Tider

	fbLocalTime     : FB_LocalSystemTime;
		systemtidDT: DATE_AND_TIME;
			datumTimmeString: STRING(255);
		datumTimmeDT: DATE_AND_TIME;

	timme: INT;
	TIMEvaerde: TIME;
	TODvaerde: TIME_OF_DAY;
	stringTid: STRING;
	stringTimme: STRING(255);
	timmeloggad: INT;

	stringDatum: STRING(255);
	stringDatumTid: STRING;
	

	bBusyHuset: BOOL;
	bBusyEon: BOOL;
	
	RisingEdge			: R_TRIG;
	nettoEffektW: 			REAL;	//W. Till nätet blir minus och plus från nätet
	husEffektW: 			REAL;	//W
	solEffektW: 			REAL;	//W
	sparadEffektW: 			REAL;	//W

	fbWritePersistent: FB_WritePersistentData;
	bWritePersistent: BOOL;

	fel: UDINT;
	upptagen2: BOOL;
	bErrorCount: INT;
END_VAR

VAR PERSISTENT
	timIndex: INT;    					 //remanent   //Från 0 till 87000 = 10 år
	timData: ARRAY[0..87600] OF ST_timData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

//Communicator appen
fbCommunicator(timData:=timData,timIndex:=timIndex);

//SmartMeter, hämta data en gång per 10sekunder

// EON-mätare - init client parameters at startup
IF NOT fbHttpClientEonMaetare.bConfigured THEN 
	fbHttpClientEonMaetare.nHostPort:= 82;
END_IF

fbHttpClientEonMaetare.Execute();

// Husets-mätare - init client parameters at startup
IF NOT fbHttpClientHuset.bConfigured THEN 
	fbHttpClientHuset.nHostPort:= 80;
END_IF

fbHttpClientHuset.Execute();

// 10 sekunder - Cyklisk fråga med GET - EON-mätare och Hemma-mätare 

samladataIntervall(IN:=trigger, PT:=  T#5S, Q=>klar ,ET=> raeknartid);
IF samladataIntervall.Q THEN
	nisse:=nisse+1;			
	trigger:=FALSE;	
	bGet10sek:=NOT bGet10sek;
ELSE
		trigger:=TRUE;
END_IF

IF fbHttpClientEonMaetare.bConfigured THEN 
		fbHttpGetEonMaetare(timData:=timData,nettoEffektW:=nettoEffektW,bSend:= bGet10sek, fbClient:=fbHttpClientEonMaetare,timIndex:=timIndex,bBusy=>bBusyEon);
END_IF

//Hemmamätare
IF fbHttpClientHuset.bConfigured THEN 
		fbHttpGetHuset(timData:=timData,bSend:=bGet10sek, fbClient:=fbHttpClientHuset, timIndex:=timIndex,husEffektW:= husEffektW, bBusy=>bBusyHuset);
END_IF

RisingEdge(CLK:= NOT bGet10sek );
IF  RisingEdge.Q THEN
	solEffektW:= husEffektW-nettoEffektW;
	IF solEffektW > husEffektW THEN
		sparadEffektW:=husEffektW;
	ELSIF solEffektW>0 AND solEffektW < husEffektW THEN
		sparadEffektW:=solEffektW;
	ELSIF solEffektW<= 0 THEN
		sparadEffektW:=0;
	ELSE
		bErrorCount:=bErrorCount+1;
		
	END_IF
	
	
				IF timData[timIndex].leagstaSolEffekt> solEffektW THEN
					timData[timIndex].leagstaSolEffekt:= solEffektW;
				ELSIF timData[timIndex].hoegstaSolEffekt< solEffektW THEN
					timData[timIndex].hoegstaSolEffekt:= solEffektW;
				END_IF

	timData[timIndex].timPris:= timData[timIndex].timPris;

	//Räkna ut pengar en gång per sampel (10s)
	timData[timIndex].sparatSolceller:= timData[timIndex].sparatSolceller + sparadEffektW/144000*(timData[timIndex].timPris+GVL.ElOeverfoeringsAvgiftEonKWh+GVL.EnergiskattKWh+GVL.MomsKWh+GVL.PaaslagMinusRabattKWh);
	timData[timIndex].avbetalningSolceller:=timData[timIndex].sparatSolceller+timData[timIndex].saaltSolceller;
END_IF

/////////////////////////////////////////////
//24 timmar - Elpriser 

// init client parameters at startup
IF NOT fbHttpClientElpriset.bConfigured THEN 
	fbHttpClientElpriset.stTLS.sVersion:='tlsv1.3';
END_IF


IF fbHttpClientSMHI.bConfigured THEN 
	fbHttpGetSMHI(bSend:=bGet24h, fbClient:=fbHttpClientSMHI, timIndex:=timIndex, timData:=timData, timData:=timData);
END_IF 


IF fbHttpClientElpriset.bConfigured THEN 
	fbHttpGetElpriset(bSend:=bGet24h, fbClient:=fbHttpClientElpriset, stringDatumTid:=stringDatumTid, timIndex:=timIndex, timData:=timData);	
END_IF 


IF timme= 0 THEN
		bGet24h:= TRUE;
ELSE
		bGet24h:= FALSE;
END_IF


fbHttpClientElpriset.Execute();

/////////////////////////////////////////////
//SMHI

// init client parameters at startup
IF NOT fbHttpClientSMHI.bConfigured THEN 
	fbHttpClientSMHI.nHostPort:= 80;
END_IF
	

fbHttpClientSMHI.Execute();



//Räkna fram nuvarande tid och datum
		fbLocalTime(bEnable := TRUE);
		systemtidDT := SYSTEMTIME_TO_DT(fbLocalTime.systemTime);
	  	stringDatumTid:= DT_TO_STRING(systemtidDT);
		datumTimmeString:= MID(stringDatumTid, 17, 1);
		datumTimmeString:= concat(datumTimmeString,'00');
		datumTimmeDT:= STRING_TO_DT(datumTimmeString);

	//timme
	stringTimme:=MID(stringDatumTid, 2, 15);
	timme:= STRING_TO_INT(stringTimme);




// Logga data en gång i timmen
IF timme <> timmeloggad THEN
	bWritePersistent:= TRUE;
	timmeloggad:=timme;
	timIndex:=timIndex+1;
	
 //Data som skall in i struct
	timData[timIndex].DatumTid:=datumTimmeDT;
	
	//Flytta över accumulerad data från förra timmen
	timData[timIndex].avbetalningSolceller:=timData[timIndex-1].avbetalningSolceller;  //Skall inte nollställas
	timData[timIndex].sparatSolceller:=timData[timIndex-1].sparatSolceller;  //Skall inte nollställas
	timData[timIndex].saaltSolceller:=timData[timIndex-1].saaltSolceller;  //Skall inte nollställas
ELSE
	bWritePersistent:= FALSE;
END_IF

//Skriva persistent en gång i timmen
	fbWritePersistent(START:=bWritePersistent,TMOUT:=DEFAULT_ADS_TIMEOUT,PORT:=851,BUSY=>upptagen2, ERRID=>fel);

	IF upptagen2 THEN
		nisse:=nisse+1;
	END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>