<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_HTTP_Get_SmartMeter" Id="{10604ea1-d5d2-4f3e-b891-4dec4529946c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HTTP_Get_SmartMeter
VAR_INPUT
	bSend				: BOOL;
	timData: REFERENCE TO ARRAY[0..87600] OF ST_timData;
	timIndex: REFERENCE TO INT;
	nettoEffektW:REFERENCE TO REAL;
END_VAR
VAR_IN_OUT
	fbClient			: FB_IotHttpClient;
END_VAR
VAR_OUTPUT
	bBusy				: BOOL;
	bError				: BOOL;
END_VAR
VAR
	fbRequest			: FB_IotHttpRequest;
	
		fbJsonDataType	: FB_JsonReadWriteDataType;
		felkod			: HRESULT;			
	pContent: PVOID;
	nState				: UDINT;
	RisingEdge			: R_TRIG;
	
	bGetContentResult	: BOOL;
	sContent			: STRING(1100);
	
	bGetJsonResult		: BOOL;
	
	nReqCount			: UDINT;	
	nResCount			: UDINT;
	nValidResCount		: UDINT;
	nErrCount			: UDINT;


	nisse: REAL;
	stSmartDataMomentan: SmartMeterValues;
	nisse1: REAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[RisingEdge(CLK:= bSend );



CASE nState OF
0:	
	IF RisingEdge.Q THEN 
		IF fbRequest.SendRequest(sUri:='/smartmeter/api/read', fbClient:=fbClient, eRequestType:=ETcIotHttpRequestType.HTTP_Get, 0, 0, 0) THEN				
		
		nState:= 1;
			nReqCount:= nReqCount+1;
			bBusy:= TRUE;
			bError:= FALSE;
		END_IF				
	END_IF
1:

	IF NOT fbRequest.bBusy THEN
		bError:= TRUE;
		IF NOT fbRequest.bError THEN	
			

			
//Hämta data från mätarens HTTP REST API och lägg i string
			bGetContentResult:= fbRequest.GetContent(pContent:= ADR(sContent), nContentSize:= SIZEOF(sContent), bSetNullTermination:= TRUE);
			
			
			IF fbRequest.nStatusCode >= 200 AND fbRequest.nStatusCode < 300 THEN
				bGetJsonResult:= FALSE;
			
			//Kopiera hela den importerade JSON-formaterade datasträngen och lägg i en motsvarande TwinCAT-struktur
			IF fbJsonDataType.SetSymbolFromJson(sContent, 'SmartMeterValues', SIZEOF(stSmartDataMomentan), ADR(stSmartDataMomentan), hrErrorCode=> felkod) THEN
						bError:= FALSE;
					END_IF	
			
			//räkna ut lägsta och högsta effekt
			IF felkod = 0 THEN
					

				nettoEffektW:= STRING_TO_REAL(stSmartDataMomentan.PowerDeliveredNetto);
				
				
			END_IF	
			
				//skriv in i Struct
				timData[timIndex].nettoEnergi:= timData[timIndex].nettoEnergi+ (nettoEffektW/144000);    //144 sampel per timme
				
				IF nettoEffektW >0 THEN
					timData[timIndex].KoeptEnergi:= timData[timIndex].KoeptEnergi+(nettoEffektW/144000);   //144 sampel per timme
				ELSE
						timData[timIndex].saaldEnergi:= timData[timIndex].saaldEnergi- (nettoEffektW/144000);   //144 sampel per timme
				END_IF
				
				IF timData[timIndex].laegstaNettoEffekt> nettoEffektW THEN 	
					timData[timIndex].laegstaNettoEffekt:=nettoEffektW;
				ELSIF timData[timIndex].toppNettoEffekt< nettoEffektW THEN 	
					timData[timIndex].toppNettoEffekt:=nettoEffektW;			
				END_IF
			
				nResCount:= nResCount+1;			
			END_IF
		END_IF
			nisse:=nisse+1;
		nState:= 2;
		bBusy:= FALSE;
		IF bError THEN
			nErrCount:= nErrCount+1;
		END_IF
	END_IF  	

2:   //Räkna ut pengar
IF nettoEffektW >0 THEN
	timData[timIndex].Koept:= timData[timIndex].Koept + nettoEffektW/144000*(timData[timIndex].timPris+GVL.ElOeverfoeringsAvgiftEonKWh+GVL.EnergiskattKWh+GVL.MomsKWh+GVL.PaaslagMinusRabattKWh);
ELSE
	timData[timIndex].saaltSolceller:= timData[timIndex].saaltSolceller-(nettoEffektW/144000*(timData[timIndex].timPris+GVL.NaetNyttaKWh+GVL.SkatteAvdragKWh));  //Sålt i kr
END_IF


nState:= 0;

	
END_CASE
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>